---
title: "Index"
format: html
editor: visual
---

## **Compthinking2 Assessment: Where did birds hatch?** 

## 

First, simulate data

```{r}
library(tidyverse)

# Generate sample data
# Sightings of Black Oystercatcher chicks at Santa Cruz beaches
beaches <- c("Cowell's", "Steamer Lane", "Natural Bridges", "Mitchell's", "Main")
# blue, green, black, white, yellow
band_colors <- c("B", "G", "K", "W", "Y") 
# Surveys took place weekly in the summer of 2023
surveys <- seq(as.Date("2023-06-01"), as.Date("2023-08-31"), by = 7)

# Setting the "seed" forces randomized functions (like sample()) to generate
# the same output
set.seed(1538)
# 3 band colors identify a bird. We want 12 birds.
birds <- paste0(
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE)
) %>% 
  unique() %>%
  head(12)
bloy_chicks <- tibble(
  # Randomly generate survey data
  beach = sample(beaches, size = 100, replace = TRUE),
  bird = sample(birds, size = 100, replace = TRUE),
  survey = sample(surveys, size = 100, replace = TRUE)
) %>% 
  # Remove duplicates (see ?distinct)
  distinct() %>% 
  # Sort by survey date and location
  arrange(survey, beach)
```

**Q1** We\'re randomly generating data, but we\'re all going to end up with the same data frames. How is that happening?

*This is happening because the random generation is not exactly random, but depends on time and the "seed". By setting the seed, we make the results repeatable because all random generation will produce the same output.*

**Q2** Explain in plain language what this part does. Your answer should be one or two sentences

```{r}
birds <- paste0(
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE),
  sample(band_colors, 25, replace = TRUE)
) %>% 
  unique() %>%
  head(12)
```

*This code chunk randomly samples the band colors variable three times and pastes these sampling results together to make three-color combinations. After the pipe function, we filter for only unique combinations in the samples list and then take the first twelve unique combos.*

**Q3** We generated 100 random survey observations. How many rows are in `bloy_chicks`? Why the difference?

*The difference between the random survey observations (n=100) and the bloy_chicks (n=95) object is that we filtered for unique rows in the tibble. There were clearly 5 duplicated rows generated by random sampling.*

### **Without a custom function**

We want to estimate where chicks hatched using `tidyverse` functions. Here\'s our process:

1.  For each bird, where was it seen most often?

2.  If multiple sites are tied, choose the one with the earliest observation

3.  If still tied, randomly choose one

```{r}
# Find most frequent beach per bird
beach_freq <- bloy_chicks %>% 
  count(bird, beach) %>% 
  group_by(bird) %>% 
  filter(n == max(n)) %>% 
  ungroup()
  

# Find first date for each bird+beach

beach_early <- bloy_chicks %>% 
  group_by(bird, beach) %>% 
  summarize(earliest = min(survey),
            .groups = "drop")

# Join the two conditions and retain most frequent beach, only earliest. NOTE: I THINK THIS ISN'T WORKING CORRECTLY!!

hatch_beach <- beach_freq %>% 
      left_join(beach_early, 
                by = c("bird", "beach")) %>%
      group_by(bird) %>% 
      filter(earliest == min(earliest)) %>% 
      sample_n(1) %>% 
      ungroup()
```

## **With a custom function**

```{r}
find_hatching_beach <- function(site, date) {
  # Start with a data frame (or tibble) of site and date for *one* bird. Use pipes and dplyr functions to find the hatching beach
  bird_observations <- tibble(site, date)
  result <- bird_observations %>% 
    filter(date = min(date))
  # result should end up as a data frame with one row for the hatching beach
  return(result$site) # return the hatching beach
}
```
